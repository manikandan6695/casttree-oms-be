import { Injectable, OnModuleInit } from "@nestjs/common";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { processInstanceDetailModel } from "./schema/processInstanceDetails.schema";
import { ProcessInstanceDetailSyncEntity } from "./process-instance-detail-sync.entity";

@Injectable()
export class ProcessInstanceDetailSyncService implements OnModuleInit {
  constructor(
    @InjectModel("processInstanceDetail")
    private readonly processInstanceDetailModel: Model<processInstanceDetailModel>,
    @InjectRepository(ProcessInstanceDetailSyncEntity)
    private readonly processInstanceDetailRepository: Repository<ProcessInstanceDetailSyncEntity>
  ) {}

  async onModuleInit() {
    await this.setupChangeStream();
  }

  private async setupChangeStream() {
    const changeStream = this.processInstanceDetailModel.watch([], {
      fullDocument: "updateLookup",
    });

    changeStream.on("change", async (change) => {
      try {
        switch (change.operationType) {
          case "insert":
          case "update":
            await this.handleUpsert(change.fullDocument);
            break;
          case "delete":
            await this.handleDelete(change.documentKey._id);
            break;
        }
      } catch (error) {
        console.error("Error processing process instance detail change stream:", error);
      }
    });

    changeStream.on("error", (error) => {
      console.error("Process instance detail change stream error:", error);
    });
  }

  private async handleUpsert(processInstanceDetail: processInstanceDetailModel) {
    try {
      // Check if process instance detail already exists by mongoId
      const existingProcessInstanceDetail = await this.processInstanceDetailRepository.findOne({
        where: {
          mongoId: processInstanceDetail?.id?.toString()
        }
      });

      if (existingProcessInstanceDetail) {
        // Update existing process instance detail
        const updatedProcessInstanceDetail = this.mapToProcessInstanceDetailEntity(processInstanceDetail);
        updatedProcessInstanceDetail.id = existingProcessInstanceDetail.id; // Keep the existing UUID
        await this.processInstanceDetailRepository.save(updatedProcessInstanceDetail);
        console.log(`Updated process instance detail ${processInstanceDetail?.id} in SQL database`);
      } else {
        // Insert new process instance detail
        const processInstanceDetailEntity = this.mapToProcessInstanceDetailEntity(processInstanceDetail);
        await this.processInstanceDetailRepository.save(processInstanceDetailEntity);
        console.log(`Inserted new process instance detail ${processInstanceDetail?.id} to SQL database`);
      }
    } catch (error) {
      console.error(`Error syncing process instance detail ${processInstanceDetail?.id}:`, error);
    }
  }

  private async handleDelete(processInstanceDetailId: string) {
    try {
      // Find and delete by mongoId
      const existingProcessInstanceDetail = await this.processInstanceDetailRepository.findOne({
        where: {
          mongoId: processInstanceDetailId
        }
      });

      if (existingProcessInstanceDetail) {
        await this.processInstanceDetailRepository.remove(existingProcessInstanceDetail);
        console.log(`Deleted process instance detail ${processInstanceDetailId} from SQL database`);
      } else {
        console.log(`Process instance detail ${processInstanceDetailId} not found in SQL database for deletion`);
      }
    } catch (error) {
      console.error(`Error handling delete for process instance detail ${processInstanceDetailId}:`, error);
    }
  }

  private mapToProcessInstanceDetailEntity(processInstanceDetail: processInstanceDetailModel): ProcessInstanceDetailSyncEntity {
    const processInstanceDetailEntity = new ProcessInstanceDetailSyncEntity();
    
    // id will be auto-generated by TypeORM as UUID
    processInstanceDetailEntity.mongoId = processInstanceDetail?._id?.toString();
    processInstanceDetailEntity.processInstanceId = processInstanceDetail.processInstanceId?.toString();
    processInstanceDetailEntity.processId = processInstanceDetail.processId?.toString();
    processInstanceDetailEntity.taskId = processInstanceDetail.taskId?.toString();
    processInstanceDetailEntity.taskResponse = processInstanceDetail.taskResponse;
    processInstanceDetailEntity.taskStatus = processInstanceDetail.taskStatus;
    processInstanceDetailEntity.triggeredAt = new Date(processInstanceDetail.triggeredAt);
    processInstanceDetailEntity.startedAt = new Date(processInstanceDetail.startedAt);
    processInstanceDetailEntity.endedAt = new Date(processInstanceDetail.endedAt);
    processInstanceDetailEntity.status = processInstanceDetail.status;
    processInstanceDetailEntity.createdBy = processInstanceDetail.createdBy?.toString();
    processInstanceDetailEntity.updatedBy = processInstanceDetail.updatedBy?.toString();
    
    // Timestamps will be auto-managed by TypeORM
    // created_at and updated_at will be set automatically
    
    return processInstanceDetailEntity;
  }

  // Method to manually trigger sync for existing process instance details
  async syncExistingProcessInstanceDetails() {
    try {
      console.log("Starting sync of existing process instance details...");
      
      const processInstanceDetails = await this.processInstanceDetailModel.find({}).limit(100); // Limit to avoid memory issues
      
      for (const processInstanceDetail of processInstanceDetails) {
        await this.handleUpsert(processInstanceDetail);
      }
      
      console.log(`Successfully synced ${processInstanceDetails.length} existing process instance details`);
    } catch (error) {
      console.error("Error syncing existing process instance details:", error);
    }
  }

  // Method to get sync status
  async getSyncStatus() {
    try {
      const totalProcessInstanceDetails = await this.processInstanceDetailModel.countDocuments({});
      const syncedProcessInstanceDetails = await this.processInstanceDetailRepository.count();
      
      console.log(`Total process instance details in MongoDB: ${totalProcessInstanceDetails}`);
      console.log(`Total process instance details synced to SQL: ${syncedProcessInstanceDetails}`);
      
      return {
        totalProcessInstanceDetails,
        syncedProcessInstanceDetails,
        syncStatus: "active",
        lastSync: new Date()
      };
    } catch (error) {
      console.error("Error getting process instance detail sync status:", error);
      throw error;
    }
  }

  // Method to get synced process instance details from SQL database
  async getSyncedProcessInstanceDetails(skip: number = 0, limit: number = 10) {
    try {
      const processInstanceDetails = await this.processInstanceDetailRepository.find({
        skip,
        take: limit,
        order: {
          created_at: 'DESC'
        }
      });
      
      return {
        processInstanceDetails,
        total: await this.processInstanceDetailRepository.count(),
        skip,
        limit
      };
    } catch (error) {
      console.error("Error getting synced process instance details:", error);
      throw error;
    }
  }

  // Method to find process instance detail by mongoId in SQL database
  async findSyncedProcessInstanceDetailByMongoId(mongoId: string) {
    try {
      return await this.processInstanceDetailRepository.findOne({
        where: { mongoId }
      });
    } catch (error) {
      console.error(`Error finding synced process instance detail by mongoId ${mongoId}:`, error);
      throw error;
    }
  }

  // Method to find process instance details by processInstanceId
  async findSyncedProcessInstanceDetailsByProcessInstanceId(processInstanceId: string) {
    try {
      return await this.processInstanceDetailRepository.find({
        where: { processInstanceId }
      });
    } catch (error) {
      console.error(`Error finding synced process instance details by processInstanceId ${processInstanceId}:`, error);
      throw error;
    }
  }

  // Method to find process instance details by processId
  async findSyncedProcessInstanceDetailsByProcessId(processId: string) {
    try {
      return await this.processInstanceDetailRepository.find({
        where: { processId }
      });
    } catch (error) {
      console.error(`Error finding synced process instance details by processId ${processId}:`, error);
      throw error;
    }
  }

  // Method to find process instance details by taskId
  async findSyncedProcessInstanceDetailsByTaskId(taskId: string) {
    try {
      return await this.processInstanceDetailRepository.find({
        where: { taskId }
      });
    } catch (error) {
      console.error(`Error finding synced process instance details by taskId ${taskId}:`, error);
      throw error;
    }
  }

  // Method to find process instance details by task status
  async findSyncedProcessInstanceDetailsByTaskStatus(taskStatus: string) {
    try {
      return await this.processInstanceDetailRepository.find({
        where: { taskStatus }
      });
    } catch (error) {
      console.error(`Error finding synced process instance details by task status ${taskStatus}:`, error);
      throw error;
    }
  }
}
